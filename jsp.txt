■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터네트워크 
- 클라이언트 ↔ 서버
- 1)  Web    프로그래밍 (Http 통신)   단방향통신 
     ( Client요청시 Server응답 후종료)
- 2)  Socket 프로그래밍 (채팅)           양방향통신 
     ( 특정port를 통해 실시간으로 정보를 주고 받음 - 계속연결되어 있음)

2. WS 와 WAS
- WS(Web Server) : 정적 컨텐츠 (html,css,js) 웹브라우저에게 제공
  예) Apache

- WAS (Web Application Server) : 동적컨텐츠
  브라우저와 dbms사이에 동작하는 미들웨어
  예) apache + tomcat

3. Tomcat

>> Http request( 요청 ) > Catalina(해결사) > Context > Servlet > response

Catalina : 실제 요청을 처리 함

3-1) http request (요청)
3-2) coyte가 해결사 찾기: http요청을 처리할 웹어플리케이션(context)
		      web.xml 파일내용을 참고해서 요청전달.
3-3) Catalina (Servlet) : servlet환경을 Catalina라 함 * servlet 오류
3-4) Jasper ( Jsp Engine) : java + html 페이지 요청처리 응답(response) * 페이지 오류


정리문제
q1. WEB
  서비스이용(요청 -> request) 서비스제공(응답 -> response)
q2. WS 정적서버 apache
     WAS 동적서버 apache + tomcat

q3. action / method / name

■2.JSP
1. JSP 기본요소
- HTML + JAVA

1) 스크립트립 : <% %> 자바코드가 들어가는 곳
2) 지시자      : <%@ %> 
3) 주석         : <%-- --%>
4) 표현         : <%=    %> 출력
5) 선언	      : <%!     %> 선언

2. form
 서버쪽으로 정보전달
  action="요청처리"	method="요청처리방식" (get,post)
  name = "데이터보관이름" (db 필드명과 같음)

3. 쿼리스트링
https://www.google.com/search?q=apple&name=sally

-url 뒤에 입력데이터를 함께 제공하는 데이터 전달방법
-get방식 

- 클라이언트[#] ↔ 서버
4. request.getParameter("name값");
- 클라이언트 ↔ 서버[#]
-repueqt.getParameter("p");


■ 3.내장객체
1. request (요청)
 - request.getParameter("name"); 값한개
 - request.getParameterValues("name"); 값여러개 - checkbox

2. response (응답)
 - response.sendRedirect("처리경로"); 
   * response/requeset가 유지 안됨
   * 같은 처리 alert 출력안됨.
   ※ location.href / meta http-equiv = 'refresh' content = '초; url=경로'

 - request.getRequestDispatcher("경로").forward(request,response);
  * 요청과 응답 위임
  * response/requeset가 유지가 됨 

3. scope 범위
 [ application(애플리케이션) > session(브라우저) > request(요청) > pageContext(해당 페이지만) ]

4. session 
  - http 프로토콜 ( 단점 데이터요청 - 응답을 받게 되면 바로 종료 ) - 1회성
  
  - 1회성 단점을 보완하고자 나온게 session
  - 서버측에 저장되는 정보
  - 보안안전

5. cookie
  - 클라이언트 측에 저장되는 정보
  - 보안상 취약

6. error
  - 4xx (클라이언트 오류) 5xx (서버측 오류)
  - 404 페이지 찾을 수 없음, 500 (자바 코드상 오류)
  - web.xml 에러설정

7. out
  - 출력
  
■ 4. mvc1 vs mvc2
1.MVC
 - 서로 영향없이 쉽게 고칠 수 있는 애플리케이션

 - M(Model) : 애플리케이션의 정보 (db정보, dto, dao, 비지니스 logic 포함)
 - V(View) : 사용자가 사용하는 화면
 - C(Controller) : model과 view 사이의 상호작용 관리

2. mvc1 vs mvc2
 - mvc1 - controller역할을 jsp가 담당
 - mvc2 - controller 역할을 servlet이 담당


■ 5. dbcp
1. dbcp 
 - 분산응용프로그램

2. 실습

1) 다운로드 
	https://apache.org/ - commons - dbcp, pool, collections
2) [WEB-INF] - [lib] JAR
3) DBCP - JAVA 파일 만들기
	http://tomcat.apache.org/

■ sever.xml

<Context>
  <Resource name="jdbc/mbasic" auth="Container" type="javax.sql.DataSource"
               maxTotal="100" maxIdle="30" maxWaitMillis="10000"
               username="root" password="1234" driverClassName="com.mysql.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/mbasic"/>
</Context>

■ web.xml

<resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/mbasic</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>

■ DBCP연동
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
Connection conn = ds.getConnection();

■ 2025-03-28 복습문제
https://hi-sally03915.tistory.com/1688

Q11.  데이터베이스 언어인 DML을 설명하시오.
  - CRUD
  - 데이터 조작어 (Data Manipulation Language)
  - insert, select, update, delete

Q12. PreparedStatement에서 sql문 실행시 insert, update, delete 에서는  ( executeUpdate() )를 사용,
     select에서는 (  executeQuery()  )를 사용한다.

Q13. frontController 패턴을 설명하시오.
	1. mvc
	2. mvc1 - jsp가  controller 역할
	3. mvc2 - servlet이 controller 역할
	4. frontController - 클라이언특가 보낸요청을 받아서 공통작업(인증, 권한)을 먼저 수행
			 적절한 세부 controller에게 작업을 위임 (처리 + 뷰 선택)

Q14. *.do를 설정하려고 한다. servlet의 경로를 가져오는 request메서드는? 
    방법1. @WebServlet("*.do") Servlet - 테스트
    방법2. web.xml - 배포관리용 
	<servlet></servlet>
	<servlet-mapping></servlet-mapping>

Q15. 다형성이란?
     - 한가지 자료형으로 여러자료형을 관리하려고
     - 부모자료형으로 자식자료형을 관리


Q16. request/ response 유지하고 경로를 숨기고 다른화면으로 넘어가는 것은?
   request.getRequestDispatcher("경로").forward(request,response);

Q17. request / response 유지안되고 다른화면으로 넘어가는 3가지 방법은?
   response.sendRedirect("경로");
   

  // location.href
  // meta http-equiv='refresh' 새로고침
   out.println("<script>alert("알림창"); location.href='경로';</script>")
   out.println("meta http-equiv='refresh' content='몇초;url=경로' ")

Q18. 다음과 같이 경로를 넘어가려고 한다.
   request / response 유지안되고 다른화면으로 넘어가는 3가지 방법 중 alert가 처리 안되는 것은?
      
    response.sendRedirect("경로");  <<우선 실행되어 스크립트 alert 처리안됨



■ PART005 필요기능
1. el/jstl
> el 
  - 표현식( 출력 ) 
  - <%= %>
  - ${}
> jstl (JavaServer page Standard Tag Library)
   - 자바코드 대신 태그로 웹페이지 작성
   - <%= if() %> << 이제 안씀
  
   - <c:if test=""> </c:if>
   - <c:forEach> </c:forEach>

2. admin만 글쓰기 ( session 정리 )

3. Naver api
   [ com.company.util ] - NaverBook.java


4. ajax



-1.  반복문, 조건문 등의 기본구현
-2.  사용법
 1. http://jakarta.apache.org/
 2. 왼쪽메뉴 :  Tablibs
 3. Standard Taglib -  다운로드 - jakarta-taglibs-standard-1.1.1.zip
 4. [WEB-INF]-[lib] - jstl.jar / standard.jar

-3. jstl 라이브러리
  core : 기본적인 기능제공
  fmt  : format 형식
  xml  : xml관련처리
  sql  : sql관련처리



