■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터네트워크 
- 클라이언트 ↔ 서버
- 1)  Web    프로그래밍 (Http 통신)   단방향통신 
     ( Client요청시 Server응답 후종료)
- 2)  Socket 프로그래밍 (채팅)           양방향통신 
     ( 특정port를 통해 실시간으로 정보를 주고 받음 - 계속연결되어 있음)

2. WS 와 WAS
- WS(Web Server) : 정적 컨텐츠 (html,css,js) 웹브라우저에게 제공
  예) Apache

- WAS (Web Application Server) : 동적컨텐츠
  브라우저와 dbms사이에 동작하는 미들웨어
  예) apache + tomcat

3. Tomcat

>> Http request( 요청 ) > Catalina(해결사) > Context > Servlet > response

Catalina : 실제 요청을 처리 함

3-1) http request (요청)
3-2) coyte가 해결사 찾기: http요청을 처리할 웹어플리케이션(context)
		      web.xml 파일내용을 참고해서 요청전달.
3-3) Catalina (Servlet) : servlet환경을 Catalina라 함 * servlet 오류
3-4) Jasper ( Jsp Engine) : java + html 페이지 요청처리 응답(response) * 페이지 오류


정리문제
q1. WEB
  서비스이용(요청 -> request) 서비스제공(응답 -> response)
q2. WS 정적서버 apache
     WAS 동적서버 apache + tomcat

q3. action / method / name

■2.JSP
1. JSP 기본요소
- HTML + JAVA

1) 스크립트립 : <% %> 자바코드가 들어가는 곳
2) 지시자      : <%@ %> 
3) 주석         : <%-- --%>
4) 표현         : <%=    %> 출력
5) 선언	      : <%!     %> 선언

2. form
 서버쪽으로 정보전달
  action="요청처리"	method="요청처리방식" (get,post)
  name = "데이터보관이름" (db 필드명과 같음)

3. 쿼리스트링
https://www.google.com/search?q=apple&name=sally

-url 뒤에 입력데이터를 함께 제공하는 데이터 전달방법
-get방식 

- 클라이언트[#] ↔ 서버
4. request.getParameter("name값");
- 클라이언트 ↔ 서버[#]
-repueqt.getParameter("p");
















