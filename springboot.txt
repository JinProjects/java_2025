■ STEP1. project
  - enc UTF-8
  - springboot

spring boot bevTools 프로젝트 수정된 내용 반영
Lombok dto -  getter setter 생성자 자동으로 만들어줌 
	      , @Entity - db셋팅 관련 자동으로 만들어줌
jpa,h2,mysql - db 관련
thymeleaf

연습) boot002 project 만들기
	1) application.properties 설정
	  context.path = /boot2
	포트번호 8282
	application-type = web으로 설정
	2) com.comapny.boot2 
	  @Controller
	  @ResponseBody 설정해서
	localhost:8282/boot2/ex1 접속시 - springboot 출력
	3)@Controller 설정해서
	RequestMapping("/ex2") - model 설정 test, ex2
	localhost:8282/boot2/ex2 접속시 - model에서 설정한 -ex2 출력


■ STEP2. setting (properties)
# WebApplication

# Banner Setting
# 
spring.main.banner-mode=off


# DataSource Setting
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/myboot
spring.datasource.username=root
spring.datasource.password=1234


# Jpa Setting
# sql crud make (option = create/update)
spring.jpa.hibernate.ddl-auto=create - 기존 데이터 삭제 (신규 프로젝트 아니면 보통 update 사용)
# 
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.properties.hibernate.show-sql = true
# Logging
logging.level.org.hibernate=info

# Thymeleaf
spring.thymeleaf.cache=false


■ STEP3. db연동
	-jpa 
	1) application.properties
	2) @Entity - Dto / 테이블만들기 
	3) @Repository - Dao 

- ex) 
	1) @Entity 이용해서 Member 테이블 만들기
	2) @Repository 이용해서 MemberRepository

■ STEP4. view

1. pom.xml 셋팅확인
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<!--  https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect  -->
<!--  추가  -->
<dependency>
<groupId>nz.net.ultraq.thymeleaf</groupId>
<artifactId>thymeleaf-layout-dialect</artifactId>
</dependency>
<!--  추가  -->

2. application.properties 설정확인

3. layout

4. 화면설정


■ STEP5. board
 https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html#jpa.query-methods.query-creation

■ STEP6. security
1. spring security?
 1) 애플리케이션의 보안(인증, 인가) 담당
 2) filter의 흐름에 따라 처리
 
2. 인증 vs 인가
 1) 인증 - 본인이 맞는지 확인            여권) - 본인이 맞는지 인증 
 2) 인가 - 인증된 사용자가 접근가능    접근가능 허용 범위 - 일반인이 조종석까지 못감

3. spring security 아키텍쳐 (1)
1) 사용자가 로그인폼 로그인시도 ( username + password 전달 )
2) UsernamePasswordAuthentication 요청정보 - Authentication 생성
3) Authentication 인증처리


10) 인증완료 (사용자정보) SecurityContextHolder에 담기
  - AuthenticationSuccessHandler 성공!
  - AuthenticationFailureHandler 실패!

3. spring security 아키텍쳐 (2)
4)   Authentication Manager 인증담당
    - UsernamePasswordAuthentication Token은 Provider를 찾는데 사용

5) AuthenticationProvider - 로그인정보와 db정보를 비교
6) UserDetailService - db에 있는 사용자 정보 가져오기


[실습]
1. spring project > pom.xml
ex) board 
2. localhost:8080/login 로그인창 -> 인증 (본인확인) 

3. SecurityConfig.java - 설정

4. Member @Entity


5. MemberRepository - crud(Dao) 
6. MemberService
7. Controller 
8. View 













    







7. @Service
1) 패키지명

