1.  java?
 1) java?
- 프로그래밍 언어
- 사람이 작성한 코드를 ㅋ넘퓨터가 이해할 수 있는 명령을 작성하는 도구
- 정부나 기업의 si (시스템 통합프로젝트) 가 대부분 자바로 구현
- jvm (java virsual machine)
  운영체제와 하드웨어에 관계없이 실행
- OOP 

2. OOP(Object Oriented Programming) 특징
- 부품객체(class)를 조립해서 만들어가는 프로그래밍 기법

part1) control ★
   - 변수 / 자료형 / 제어문 ( if, switch, for, while, do while) / array / method
part2) OOP 특징 ★ 면접문제
   - class / static, final, modifier  / 상속 / abstract, interface / 예외처리
part3) OOP 활용 
   - collection (ArrayList) , Thread, lambda + Stream / io / network
 

3. 설치
1) java.sun.com 다운로드 받아서 설치
2) java path 설정
JAVA_HOME : C:\Program Files\Java\jdk-17
path	    : %JAVA_HOME%\bin

[내컴퓨터] - 오른쪽마우스 - 속성 - [고급시스템설정] - [환경변수설정[
시스템변수 - [새로만들기]



3) java 설치 확인
[검색]  cmd
---------------------------
java -version
---------------------------

4. 설치 (2)  eclipse
1) eclipse.org - 다운로드 - java EE
2) 작업환경 (workspace) - D:\java_2025 
* [window] - [preferences] - java
* [window] - [preferences] - [검색 : enc]

5. 프로그램 작성 (프로그램 동작)
1) 소스파일(개발자) - 컴파일(번역) - 바이트코드(컴퓨터)
      .java                                         .class
     A001.java   --javac A001.java --   A001.class
2)

* 자바프로젝트 : File - new - java project
 ■프로젝트이름 / ■JRE - JavaSE-17
*    패키지 : 프로젝트 - src - 오른쪽마우스 - new - package 
	com.회사명.프로젝트명.작업단위
	예) com.company.java001
*      자바파일(부품객체) : 패키지 - 오른쪽마우스 - new - class
     - 클래스명은 대문자

public class A001 {
	public static void main(String[] args) {
		System.out.println("Hello");
	} //end main
} // end class 

//한줄 변경 ctrl  + alt + j
// 한줄 수석(설명글)
/* 3번째 줄 : public class A001 { 
 		public 아무데서나 접근가능 /	class	부품객체 / A001	클래스이름
   4번째 줄 : jvm 구동시작점
   	public static void main(String[] args) {
	public 아무데서나 접근가능 / static 메모리상 사용가능 / 
	void main(String[] args) 전원버튼 jvm이 찾는 메서드
   5번째 줄 : System.out.println("Hello");
   	System (운영체제) out ( cmd ) println(출력)
 */

6. git연결
1) 폴더만들기 - D:\java_2025
2) source tree

■7. 출력 (1) println, print, printf
  System.out.print("문자열-하고싶은 말"); //줄바꿈 처리 안됨
  System.out.println("문자열-하고싶은 말");
  System.out.println("A\nAB\nABC");

  System.out.printf("내나이%d, 내이름%s, 좋아하는 숫자 파이 %.2f");
 %d 숫자 정수 : 10,20,30
 %s 문자열 : "abc"
 %f 숫자 실수형: 1.23, 1.5, 3.14

■7. 출력 (2) + 의미, ()
System.out.println( 1+2 ); // 3
System.out.println( 1+2 + "+" + 3+4 ); //3+34
System.out.println( "" + 1+2 ); //12

1)   + 연산
2)  대상 + 대상 더하기 연산
3)  숫자 + 문자열, 문자열 + 숫자

■8. 변수
- 토큰 : 특정의미를 가진문자
- 리터럴, 키워드, 식별자, 연산자, 구분자

2. 값의 보관
- 값의 보관 == 메모리확보
- 변수 : 변하는 수 (오픈박스), 한개의 값
- 상수 : 변하지 않는(상) 수 (밀봉박스)
- 변수이름 규칙 : $_소문자7

3. 변수사용법
   자료형 변수명
   int a;             -       int 정수 1,2,3          a[]
   double b;       -       double 실수 1.23     b[]

  a = 10;                                             a[10]
  a = 20;                                             a[20]

※ 상수 final int JAVA_HOME; -수정못해! 

■9. 자료형(1)
1) 자료형의 구분
  - 기본형 : 실제값
  - 참조형 : 주소값 (String)

2) 기본자료형
 논리형 - blooean true/false
 정수형 - byte(1byte) - short(2byte) - int ★ (4byte) - long(8byte)
 실수형 - float(4byte) - double(8byte) ★ (4-8)
	float f = 3.14f; double d = 3.14;

★ 자바기본처리단위
★ 정수 < 실수 float f = 1L  

■10. 자료형(2)
1. 기본형
  1) 논리형 - boolean :  true/false
  2) 정수형 - byte - short - int - long(L)
  3) 실수형 - float - double

2. 형변환
  1) 데이터 타입을 다른 타입으로 변환하는 것
  2) boolean 빼고 변환 가능 
  3) 자동타입변환(작은 타입은 큰타입으로 자동변환) / 강제타입변환
- (float), (int)
  4)자동타입변환
- byte by = 1; by        []
  int in = 0     in [  |   |  |  ]
  in      =  by;

  5)강제타입
  int in = 0;    in[  |  |  |  ]
  byte by = 1; by       [  ]  
  by     = in;    ※ error
- 해결방안) by   = (byte)in;


3. char
1) 유니코드 - 2byte 

char ch1 = '';
char ch2 = '\u0000'; - 유니코드\u

2) 저장시 숫자로 출력 문자로 
3) 문자열에서 문자처리 


※자바자료형 범위 찾아보기

■11. 연산자

1. 연산??
1) 데이터를 처리해서 결과값을 산출하는 과정

2. 종류
먼저 값을 구하고     비교               조건처리후      대입
()   +,-,*,/,%           <> <= >= ,==, !=  &&, ||. ?:       =, += 

3. 필수조건

■12. 조건문
1. 프로그램 코드 실행흐름
 - 위 -> 아래, 왼쪽 -> 오른쪽
 - 제어문은 개발자가 원하는 방향으로 변경할 수 있도록 도와줌.

2. 제어문의 종류
  조건문 : if, switch
  반복문 : for, while, do while
  제어키워드 : break, continue

1) for( 초기문; 조건문; 증감문;){ 반복해야할 내용 } - 반복횟수를 알고 싶을 때
2) while(){} - 반복횟수를 모를 때 예) 계속증가되는 게시판 

  초기문;
  while(조건문){  반복해야할 내용   증감문;  } 

3) do{  반복해야 할 내용  증감문; } while(조건문);


■14. array 배열
1. 배열?
- [같은 타입]의 데이터를 연속된 공간에 저장하는 자료구조
- 각 데이터의 저장위치 [인덱스]를 통해서 접근

int[] arr = { 1,2,3 };
------------------------------------------------
[heap-동적데이터]      [stack-임시데이터]
1번지 {1, 2, 3} ← arr 1번지
    arr[0][1][2]
------------------------------------------------

■15. method
1. method?
- 코드 재사용
- 실행하고자 하는 명령어들을 {} 안에 한꺼번에 모아놓고
- 메서드이름이 호출되면 실행되는 기능
- function, method, 멤버함수
   function과 method 차이점
    - function은 클래스에 상관없이 작성함
    - method는 클래스 안에 작성함

2. method 사용법
Step1)  함수정의
Step2)  함수호출


● 2.생성자
1.생성자
 - new 연산자에 의해 호출 [초기화] 담당

2. 기본생성자(디폴트생성자)
- 모든클래스에 생성자가 반드시 존재
- 생성자선언을 생략시 컴파일러가 자동으로 기본생성자를 추가
- 개발자가 직접 선언시 컴파일러가 자동생성을 취소

3. 생성자형식 
class A{
   public A(){} //기본생성자
   public A(String name){} //파라미터, 알규먼트가 있는 생성자.
}

1)  리턴값 없음 - 리턴값 메서드명(파라미터)
2)  클래스명과 동일
3)  디폴트생성자를 생성해야하는 경우 : 오버로딩, 상속

4. 초기화순서
	기본값		명시적초기화	초기화블록	생성자

   4-1) 기본값 : String, 객체 - null / int - 0 으로 초기화
   4-2) 명시적초기화 : int a = 10; 중요콘텐츠 명시적으로 알림
   4-3) 초기화블록 :   {a=10; b=20;} 여러개 초기화시
   4-4) 생성자 :  최종은 생성자에서 사용함. 인스턴스변수 초기화

1) 리턴값 없음 	- 리턴값 메서드명(파라미터)
2) 클래스명과 동일 
3) 디폴트생성자를 생성해야하는 경우 : 오버로딩, 상속
● 3.static
1. runtime data area
method : 정보저장, static, final
heap     : 동적저장 - new, gc(garbage collector) 처리 소멸
stack     : 임시 값 저장

2.static 
- jvm 소스로딩시 메모리 할당받음
- new 연산자보다 먼저 실행되어 메모리(method 영역: runtime)에 1회 생성
- 클래스명.변수명 / 클래스명.메서드명 - 클래스 변수/클래스 메서드
   Calc.name
- 객체생성과 관련이 없음
- 인스턴스로 접근시 권장사항이 아니므로 경고발생

3.final
- 수정불가능
- 클래스 ( 상속불가능 - extends 사용못함)
- 멤버변수 ( 상속 )
- 멤버함수 ( 부모메서드사용못함 - @Override 못함)

● 4. 지정접근자
- 클래스 및 구성요소에 대한 접근제한 역할
		클래스내부      패키지(폴더)   하위클래스(상속)	그외
public		O		O 	   O		O
protected	O		O	   O		X
default(package)	O		O	   X		X
private		O		X	   X		X


----------------
class A{
  private int a; int b;
  A(){}
  A(int a) { this.a = a;}  //생성자
  void setA(int a){ this.a = a; } //셋팅해주는 메서드
  int getA() {  return this.a; } //값 찾아주는 메서드
}
----------------

● 5. 클래스배열
  
   클래스[] 배열명 = new 클래스[];

   String[] arr = new String[3];
   A1[] carr = new A1[3]; [null,null,null]
   ※ null - 공간은 있지만 값이 비어있다

carr[0] = new A1(); ※ 생성자를 불러서 인스턴스변수를 초기화해 사용가능하게 만들기

1번지{ name="" } ← carr[0] 1번지

